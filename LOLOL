+<!DOCTYPE html>
 +<html>
 +	<title>Fantasy Tank Builder</title>
 +	<head>
 +		<link rel="stylesheet" href="styles.css">
 +		<link href="https://fonts.googleapis.com/css?family=Ubuntu" rel="stylesheet">
 +	</head>
 +	<body onload="onload()">
 +		<canvas id="game"></canvas>
 +		<script src="scripts/globals.js"></script>
 +		<script src="scripts/drawBackground.js"></script>
 +		<script src="scripts/drawGraphics.js"></script>
 +		
 +		<button id = "editbutton" onclick = "editButtonClick()">Toggle edit mode.</button>
 +		
 +		<p id = "note">Press the edit mode button to edit the tank. <br> Press e to autofire and c to autospin. <br> Refresh the page to get a new tank.</p>
 +		
 +		<p class="textbox" id = "bodylabel">Specifies the radius of the tank's main body (Default is 32).</p>
 +		<textarea class="textbox" id = "body" rows="1" cols = "10" visible = true placeholder = "Body Size">32</textarea>
 +		
 +		<p class="textbox" id = "offsetlabel">Specifies the distance from the center of the tank the barrel is horizontally. <br> Negative values moves to the right, positive to the left.</p>
 +		<textarea class="textbox" id = "offset" rows="1" cols = "10" visible = true placeholder = "offset">0</textarea>
 +		
 +		<p class="textbox" id = "lengthlabel">Specifies the length of the barrel, this affects speed and knockback</p>
 +		<textarea class="textbox" id = "length" rows="1" cols = "10" visible = true placeholder = "length">60</textarea>
 +		
 +		<p class="textbox" id = "widthlabel">Specifies the width of the barrel, this affects size and knockback</p>
 +		<textarea class="textbox" id = "width" rows="1" cols = "10" visible = true placeholder = "width">15</textarea>
 +		
 +		<p class="textbox" id = "reloadlabel">Specifies the time it takes for the barrel to fire again, in seconds.</p>
 +		<textarea class="textbox" id = "reload" rows="1" cols = "10" visible = true placeholder = "Reload">2</textarea>
 +		
 +		<p class="textbox" id = "knockbacklabel">Should bullets knock the tank back? Check if so.</p>
 +		<input type="checkbox" class = "textbox" id = "knockback">
 +		<p class="textbox" id = "traplabel">What type of Gun Barrel do you want to place?</p>
 +		<select class = "textbox" id = "bullet">
 +			<option value="bullet">Gun</option> 
 +  			<option value="trap">Trap Layer</option>
 +  			<option value="drone">Drone Maker</option>
 +		</select>
 +		
 +		<button class = "textbox" id = "place" onclick = "placeBarrel()">Place barrel. <br> (For mobile users.)</button>
 +		<button class = "textbox" id = "export" onclick = "printObject()">Export tank.</button>
 +		<button class = "textbox" id = "import" onclick = "importObject()">Import tank.</button>
 +		<textarea class="textbox" id = "save" rows="10" cols = "60" visible = true placeholder = "Save Codes go here..."></textarea>
 +		
 +		<p class="textbox" id = "notes">Pressing q also places a barrel. Remeber to click outside any of the boxes before doing this so you don't type q in there! <br> Ctrl + scrollWheel to increase/decrease FOV. <br> Red line shows where the tank will be facing outside of edit mode. <br> Hold shift to rotate the barrel in 15Â° increments.<br> Note that guns are drawn in order of last placed to first.</p>
 +	</body>
 +</html> 
32  scripts/drawBackground.js
@@ -0,0 +1,32 @@
 +var c = document.getElementById('game'),
 +ctx = c.getContext('2d');
 +// resize the canvas to fill browser window dynamically
 +
 +function drawStuff() {
 +	ctx.clearRect(0, 0, c.width, c.height);
 +	lines = {};
 +	lines.v = 0;
 +	lines.h = 0;
 +	ctx.strokeStyle = "#C1C1C1";
 +	for (lines.h = 0; lines.h <= c.height / 26 + 2; lines.h += 1) {
 +		ctx.beginPath();
 +		ctx.moveTo(0, lines.h * 26 + offset.y);
 +		ctx.lineTo(c.width, lines.h * 26 + offset.y);
 +		ctx.stroke();
 +	}
 +	for (lines.v = 0; lines.v <= c.width / 26 + 2; lines.v += 1) {
 +		ctx.beginPath();
 +		ctx.moveTo(lines.v * 26 + offset.x, 0);
 +		ctx.lineTo(lines.v * 26 + offset.x, c.height);
 +		ctx.stroke();
 +	}
 +}
 +
 +function resize() {
 +	c.width = window.innerWidth;
 +	c.height = window.innerHeight;
 +	drawStuff();
 +}
 +resize();
 +
 +window.onresize = resize; 
478  scripts/drawGraphics.js
@@ -0,0 +1,478 @@
 +function drawMovement() {
 +	
 +	offset.totalx += accel.x;
 +	offset.totaly += accel.y;
 +	
 +	offset.x += accel.x;
 +	offset.y += accel.y;
 +	
 +	offset.x %= 26;
 +	offset.y %= 26;
 +	
 +	drawStuff();
 +	
 +	if ((input.left === true) && (accel.x > -accel.max)) {
 +		accel.x -= accel.amount;
 +		if (accel.x > 0) {
 +			accel.x -= accel.amount;
 +		}
 +	} else if ((input.right === true) && (accel.x < accel.max)) {
 +		accel.x += accel.amount;
 +		if (accel.x < 0) {
 +			accel.x += accel.amount;
 +		}
 +	} else {
 +		if (accel.x > 0) {
 +			accel.x -= accel.amount;
 +		}
 +		if (accel.x < 0) {
 +			accel.x += accel.amount;
 +		}
 +	}
 +	
 +	if ((input.down === true) && (accel.y > -accel.max)) {
 +		accel.y -= accel.amount;
 +		if (accel.y > 0) {
 +			accel.y -= accel.amount;
 +		}
 +	} else if ((input.up === true) && (accel.y < accel.max)) {
 +		accel.y += accel.amount;
 +		if (accel.y < 0) {
 +			accel.y += accel.amount;
 +		}
 +	} else {
 +		if (accel.y > 0) {
 +			accel.y -= accel.amount;
 +		}
 +		if (accel.y < 0) {
 +			accel.y += accel.amount;
 +		}
 +	}
 +	if (accel.x > accel.max) {
 +		accel.x -= accel.amount * 2;
 +	}
 +	if (accel.y > accel.max) {
 +		accel.y -= accel.amount * 2;
 +	}
 +	if (accel.x < -accel.max) {
 +		accel.x += accel.amount * 2;
 +	}
 +	if (accel.y < -accel.max) {
 +		accel.y += accel.amount * 2;
 +	}
 +}
 +
 +function drawBarrel(a, xoffset, yoffset, width, length, alpha, isghost, type) {
 +	var tankpointx = c.width / 2 - accel.x * 20;
 +	var tankpointy = c.height / 2 - accel.y * 20;
 +	
 +	ctx.save();
 +	ctx.strokeStyle = "rgba(85, 85, 85, " + alpha + ")";
 +	ctx.lineWidth = 10;
 +	ctx.fillStyle = "rgba(153, 153, 153, " + alpha + ")";
 +	ctx.translate(tankpointx, tankpointy, 0);
 +	if (editmode === false){
 +		ctx.rotate ((angle(tankpointx, tankpointy, mouse.x, mouse.y) + a) * (Math.PI / 180));
 +	} else if ((isghost === true) && (shiftheld === true)) {
 +		if ((a <= -172.5) || (a >= 172.5)) {
 +			a = 180;
 +		}
 +		a -= a % 15;
 +		ctx.rotate (a * (Math.PI / 180));
 +	} else {
 +		ctx.rotate (a * (Math.PI / 180));
 +	}
 +	
 +	if (type === 0) {
 +		ctx.strokeRect(xoffset, 0 - ((width / 2) + yoffset), length, width);
 +		ctx.fillRect(xoffset, 0 - ((width / 2) + yoffset), length, width);
 +	}
 +	
 +	if (type === 1) {
 +		ctx.beginPath();
 +		ctx.moveTo(xoffset + length, 0 - ((width / 2) + yoffset));
 +		ctx.lineTo(xoffset + length + (length / 2),  0 - ((width / 2) + yoffset) - (width / 4) );
 +		ctx.lineTo(xoffset + length + (length / 2),  ((width / 2) - yoffset) + (width / 4) );
 +		ctx.lineTo(xoffset + length, ((width / 2) + yoffset));
 +		ctx.closePath();
 +		ctx.stroke();
 +		ctx.fill();
 +
 +		ctx.strokeRect(xoffset, 0 - ((width / 2) + yoffset), length, width);
 +		ctx.fillRect(xoffset, 0 - ((width / 2) + yoffset), length, width);
 +	}
 +	
 +	if (type === 2) {
 +		ctx.beginPath();
 +		ctx.moveTo(xoffset + 20, -(width / 4) - yoffset);
 +		ctx.lineTo(xoffset + 20 + (length / 2),  0 - ((width / 2) + yoffset) - (width / 4) );
 +		ctx.lineTo(xoffset + 20 + (length / 2),  ((width / 2) - yoffset) + (width / 4) );
 +		ctx.lineTo(xoffset + 20, (width / 4) - yoffset);
 +		ctx.lineTo(xoffset + 20, -(width / 4) - yoffset);
 +		ctx.closePath();
 +		ctx.stroke();
 +		ctx.fill();
 +	}
 +	ctx.restore();
 +}
 +
 +function drawBullet(x, y, size) {
 +	//Draw a bullet using the given parameters.
 +	
 +	ctx.save();
 +	ctx.strokeStyle = "#555555";
 +	ctx.lineWidth = 10;
 +	ctx.fillStyle = "#00B2E1";
 +	ctx.beginPath();
 +	ctx.arc(x, y, size, 0, Math.PI * 2, true);
 +	ctx.stroke();
 +	ctx.fill();
 +	ctx.restore();
 +}
 +
 +function drawTrap(x, y, size, angle) {
 +	ctx.save();
 +	ctx.strokeStyle = "#555555";
 +	ctx.lineWidth = 10;
 +	ctx.fillStyle = "#00B2E1";
 +	ctx.translate(x, y);
 +	ctx.beginPath();
 +	ctx.moveTo(0, size / 3);
 +	ctx.rotate(60 * (Math.PI / 180));
 +	ctx.lineTo(0, size);
 +	ctx.rotate(60 * (Math.PI / 180));
 +	ctx.lineTo(0, size / 3);
 +	ctx.rotate(60 * (Math.PI / 180));
 +	ctx.lineTo(0, size);
 +	ctx.rotate(60 * (Math.PI / 180));
 +	ctx.lineTo(0, size / 3);
 +	ctx.rotate(60 * (Math.PI / 180));
 +	ctx.lineTo(0, size);
 +	ctx.rotate(60 * (Math.PI / 180));
 +	ctx.lineTo(0, size / 3);
 +	ctx.closePath();
 +	ctx.stroke();
 +	ctx.fill();
 +	ctx.restore();
 +}
 +
 +function drawDrone(x, y, size, angle) {
 +	ctx.save();
 +	ctx.strokeStyle = "#555555";
 +	ctx.lineWidth = 10;
 +	ctx.fillStyle = "#00B2E1";
 +	ctx.translate(x, y);
 +	ctx.beginPath();
 +	ctx.rotate(angle * (Math.PI / 180));
 +	ctx.moveTo(0, size);
 +	ctx.rotate(120 * (Math.PI / 180));
 +	ctx.lineTo(0, size);
 +	ctx.rotate(120 * (Math.PI / 180));
 +	ctx.lineTo(0, size);
 +	ctx.rotate(120 * (Math.PI / 180));
 +	ctx.lineTo(0, size);
 +	ctx.closePath();
 +	ctx.stroke();
 +	ctx.fill();
 +	ctx.restore();
 +}
 +
 +function drawTank() {
 +	var tankpointx = c.width / 2 - accel.x * 20;
 +	var tankpointy = c.height / 2 - accel.y * 20;
 +	if (((mouse.held === true) || (autofire === true)) && (editmode === false)) {
 +		for (var n = 0; n < barrels.length; n += 1) {
 +			if ((barrels[n].reload === 0) && ((barrels[n].type < 2) || (dronelimit < 8))) {
 +				bullets[bullets.length] = new Bullet(barrels[n].xoffset, barrels[n].yoffset, 
 +				0, 0, 
 +				barrels[n].angle + angle(tankpointx, tankpointy, mouse.x, mouse.y) + 180, barrels[n].width * 0.5,  (barrels[n].width + barrels[n].length) / 500, 10, 0.5 * (barrels[n].length / 10), 100, barrels[n].length, 360, barrels[n].type);
 +				barrels[n].reload = barrels[n].basereload;
 +				
 +				if (barrels[n].hasKnockBack == true) {
 +					accel.x -= Math.cos(bullets[bullets.length - 1].angle * Math.PI / 180) * (bullets[bullets.length - 1].knockback);
 +        			accel.y -= Math.sin(bullets[bullets.length - 1].angle * Math.PI / 180) * (bullets[bullets.length - 1].knockback);
 +				}
 +				
 +				if (barrels[n].type === 2) {
 +					bullets[bullets.length - 1].x = (Math.cos(bullets[bullets.length - 1].angle * Math.PI / 180) * (-bullets[bullets.length - 1].distance - bullets[bullets.length - 1].xoffset) + (c.width / 2) + (offset.totalx - bullets[bullets.length - 1].originx))
 +					+ (Math.cos((bullets[bullets.length - 1].angle - 90) * Math.PI / 180) * (-bullets[bullets.length - 1].yoffset));
 +					   
 +					bullets[bullets.length - 1].y = (Math.sin(bullets[bullets.length - 1].angle * Math.PI / 180) * (-bullets[bullets.length - 1].distance - bullets[bullets.length - 1].xoffset) + (c.height / 2 ) + (offset.totaly - bullets[bullets.length - 1].originy))
 +					+ (Math.sin((bullets[bullets.length - 1].angle - 90) * Math.PI / 180) * (-bullets[bullets.length - 1].yoffset));
 +					
 +					dronelimit += 1;
 +				}
 +			}
 +		}
 +	}
 +	
 +	if (editmode === true) {
 +		ctx.save();
 +		ctx.strokeStyle = "#FF0000";
 +		ctx.beginPath;
 +		ctx.moveTo(tankpointx, tankpointy);
 +		ctx.lineTo(c.width, tankpointy);
 +		ctx.stroke();
 +		ctx.restore();
 +	}
 +	
 +	if ((autospin === true) && (autoangle === 180)) {
 +		autoangle = -180;
 +	} else {
 +		autoangle += 0.5;
 +	}
 +	
 +	for (var n = 0; n < bullets.length; n += 1) {
 +		//Loop through each bullet.
 +
 +		if ((bullets[n].type === 1) && (bullets[n].speed > 0)) {
 +			bullets[n].speed -= bullets[n].speed * 0.01;
 +			//If it's a trap, decrease speed each tick.
 +		}
 +
 +		if (bullets[n].type < 2) {
 +			
 +			bullets[n].distance += bullets[n].speed;
 +			//Increase distance each tick based on speed.
 +			
 +			bullets[n].x = (Math.cos(bullets[n].angle * Math.PI / 180) * (-bullets[n].distance - bullets[n].xoffset) + (c.width / 2) + (offset.totalx - bullets[n].originx))
 +			+ (Math.cos((bullets[n].angle - 90) * Math.PI / 180) * (-bullets[n].yoffset));
 +			bullets[n].y = (Math.sin(bullets[n].angle * Math.PI / 180) * (-bullets[n].distance - bullets[n].xoffset) + (c.height / 2 ) + (offset.totaly - bullets[n].originy))
 +			+ (Math.sin((bullets[n].angle - 90) * Math.PI / 180) * (-bullets[n].yoffset));
 +		} else if (autospin === true) {
 +			bullets[n].x = (Math.cos(autoangle * Math.PI / 180) * (-200 - bullets[n].xoffset) + (c.width / 2) + (offset.totalx - bullets[n].originx))
 +			+ (Math.cos((bullets[n].angle - 90) * Math.PI / 180) * (-bullets[n].yoffset));
 +			bullets[n].y = (Math.sin(autoangle * Math.PI / 180) * (-200 - bullets[n].xoffset) + (c.height / 2 ) + (offset.totaly - bullets[n].originy))
 +			+ (Math.sin((bullets[n].angle - 90) * Math.PI / 180) * (-bullets[n].yoffset));
 +		} else if (editmode === false){
 +			if (bullets[n].x < mouse.x) {
 +				bullets[n].x += bullets[n].speed / 2;
 +			}
 +			if (bullets[n].x > mouse.x) {
 +				bullets[n].x -= bullets[n].speed / 2;
 +			}
 +			if (bullets[n].y < mouse.y) {
 +				bullets[n].y += bullets[n].speed / 2;
 +			}
 +			if (bullets[n].y > mouse.y) {
 +				bullets[n].y -= bullets[n].speed / 2;
 +			}
 +		}
 +
 +		//Get the bullets current x and y based on distance, offset and angle.
 +
 +		if (bullets[n].type === 0) {
 +			drawBullet(bullets[n].x, bullets[n].y, bullets[n].size);
 +		}
 +		//Display as a bullet if it's a bullet.
 +		
 +		if (bullets[n].type === 1) {
 +			drawTrap(bullets[n].x, bullets[n].y, bullets[n].size, bullets[n].angle);
 +		}
 +		//Display as a trap if it's a trap.
 +		
 +		if (bullets[n].type === 2) {
 +			drawDrone(bullets[n].x, bullets[n].y, bullets[n].size, angle(bullets[n].x, bullets[n].y, mouse.x, mouse.y));
 +		}
 +		//Display as a trap if it's a drone.
 +		
 +		if (bullets[n].time <= 1) {
 +			bullets.splice(n, 1);
 +			//When a bullet times out, delete it.
 +		} else if (bullets[n].type === 0){
 +			bullets[n].time -= 1;
 +			//If it's a bullet, decrease it's time left to live by 1 each frame.
 +		}
 +	}
 +	
 +	for (var n = 0; n < barrels.length; n += 1) {
 +		//Loop through each barrel.
 +		var alpha = 1.0;
 +		
 +		if (barrels[n].reload > (barrels[n].basereload / 4) * 3) {
 +			barrels[n].length -= (barrels[n].length / barrels[n].basereload);
 +			//If reload is > 3/4ths of its max value, reduce the length of the barrel.
 +		} else if (barrels[n].reload > (barrels[n].basereload / 4) * 2) {
 +			barrels[n].length += (barrels[n].length / barrels[n].basereload);
 +			//otherwise if reload is > 2/4ths of its max value, increase the length of the barrel.
 +		} else {
 +			barrels[n].length = barrels[n].baselength;
 +			//For the rest of the reload cycle, set it back to its inital length.
 +		}
 +		drawBarrel(barrels[n].angle, barrels[n].xoffset, barrels[n].yoffset, barrels[n].width, barrels[n].length, alpha, false, barrels[n].type);
 +		if (barrels[n].reload > 0) {
 +			barrels[n].reload -= 1;
 +		}
 +	}
 +	
 +	var btype = 0;
 +	
 +	if (document.getElementById("bullet").value === "trap") {
 +		btype = 1;
 +	} else if (document.getElementById("bullet").value === "drone") {
 +		btype = 2;
 +	}
 +	
 +	if (editmode === true) {
 +		drawBarrel(Math.atan2((mouse.y - c.height / 2 - accel.y * 20), (mouse.x - c.width / 2 - accel.x * 20)) * (180 / Math.PI), 0, parseFloat(validateField(document.getElementById("offset").value, 0)), parseFloat(validateField(document.getElementById("width").value, 1)), parseFloat(validateField(document.getElementById("length").value, 1)), 0.5, true, btype);
 +		//Draw a ghosted barrel while in edit mode above the normal barrels.
 +	}
 +	
 +	ctx.save();
 +	ctx.strokeStyle = "#555555";
 +	ctx.lineWidth = 10;
 +	ctx.fillStyle = "#00B2E1";
 +	ctx.beginPath();
 +	ctx.arc(c.width / 2 - accel.x * 20, c.height / 2 - accel.y * 20, parseFloat(validateField(document.getElementById("body").value, 32)), 0, Math.PI*2, true);
 +	//Draw the body of the tank on top of everything.
 +	ctx.stroke();
 +	ctx.fill();
 +	ctx.restore();
 +}
 +
 +function drawUI() {
 +	ctx.save();
 +	ctx.font = "16px ubuntu";
 +	
 +	if (autofire === true) {
 +		ctx.fillStyle = "rgba(120, 120, 209, 0.5)";
 +		ctx.fillRect(c.width / 2 - 78, 10, 156, 30);
 +		ctx.fillStyle = "white";
 +		ctx.font = "bold 20px ubuntu";
 +		ctx.fillText("Auto Fire: ON", c.width / 2 - 60, 32);
 +	} else {
 +		ctx.fillStyle = "rgba(120, 120, 209, 0.5)";
 +		ctx.fillRect(c.width / 2 - 78, 10, 156, 30);
 +		ctx.fillStyle = "white";
 +		ctx.font = "bold 20px ubuntu";
 +		ctx.fillText("Auto Fire: OFF", c.width / 2 - 64, 32);
 +	}
 +	
 +	if (autospin === true) {
 +		ctx.fillStyle = "rgba(120, 120, 209, 0.5)";
 +		ctx.fillRect(c.width / 2 - 78, 50, 156, 30);
 +		ctx.fillStyle = "white";
 +		ctx.font = "bold 20px ubuntu";
 +		ctx.fillText("Auto Spin: ON", c.width / 2 - 60, 72);
 +	} else {
 +		ctx.fillStyle = "rgba(120, 120, 209, 0.5)";
 +		ctx.fillRect(c.width / 2 - 78, 50, 156, 30);
 +		ctx.fillStyle = "white";
 +		ctx.font = "bold 20px ubuntu";
 +		ctx.fillText("Auto Spin: OFF", c.width / 2 - 64, 72);
 +	}
 +	
 +	ctx.restore();
 +}
 +
 +function drawManager() {
 +	drawMovement();
 +	
 +	drawTank();
 +	
 +	drawUI();
 +}
 +
 +function placeBarrel() {
 +	var rangle = Math.atan2((mouse.y - c.height / 2 - accel.y * 20), (mouse.x - c.width / 2 - accel.x * 20)) * (180 / Math.PI);
 +	console.log(rangle);
 +			
 +	if (shiftheld === true) {
 +		if ((rangle <= -172.5) || (rangle >= 172.5)) {
 +			rangle = 180;
 +		} else {
 +			rangle -= rangle % 15;
 +		}
 +	}
 +	console.log(rangle);
 +	var btype = 0;
 +	
 +	if (document.getElementById("bullet").value === "trap") {
 +		btype = 1;
 +	} else if (document.getElementById("bullet").value === "drone") {
 +		btype = 2;
 +	}
 +
 +	barrels[barrels.length] = new Barrel(rangle, 0, parseFloat(validateField(document.getElementById("offset").value, 0)), parseFloat(validateField(document.getElementById("width").value, 20)), parseFloat(validateField(document.getElementById("length").value, 60)), parseFloat(validateField(document.getElementById("reload").value * 60, 2)), document.getElementById("knockback").checked, btype);
 +}
 +
 +function keyDownHandler(e) {
 +    "use strict";
 +    if (e.keyCode === 68) {
 +        input.left = true;
 +    }
 +    if (e.keyCode === 65) {
 +        input.right = true;
 +    }
 +    if (e.keyCode === 87) {
 +		input.up = true;
 +    }
 +	if (e.keyCode === 83) {
 +		input.down = true;
 +	}
 +	if (e.keyCode === 69) {
 +		if ((autofire === false) && (editmode === false)) {
 +			autofire = true;
 +		} else {
 +			autofire = false;
 +		}
 +	}
 +	if (e.keyCode === 67) {
 +		if ((autospin === false) && (editmode === false)) {
 +			autoangle = Math.atan2((mouse.y - c.height / 2 - accel.y * 20), (mouse.x - c.width / 2 - accel.x * 20)) * (180 / Math.PI);
 +			autospin = true;
 +		} else {
 +			autospin = false;
 +		}
 +	}
 +	if (e.keyCode === 16) {
 +		shiftheld = true;
 +	}
 +	if (e.keyCode === 81) {
 +		if (editmode === true) {
 +			placeBarrel();
 +		}
 +	}
 +}
 +
 +function keyUpHandler(e) {
 +    "use strict";
 +    if (e.keyCode === 68) {
 +		input.left = false;
 +    }
 +    if (e.keyCode === 65) {
 +		input.right = false;
 +    }
 +    if (e.keyCode === 87) {
 +		input.up = false;
 +    }
 +	if (e.keyCode === 83) {
 +		input.down = false;
 +	}
 +	if (e.keyCode === 16) {
 +		shiftheld = false;
 +	}
 +}
 +
 +function mousemove(e) {
 +    mouse.x = e.pageX - c.offsetLeft;
 +    mouse.y = e.pageY - c.offsetTop;
 +}
 +
 +function mousedown(e) {
 +	mouse.held = true;
 +}
 +
 +function mouseup() {
 +	mouse.held = false;
 +}
 +
 +document.addEventListener("mousemove", mousemove, false);
 +document.addEventListener("mousedown", mousedown, false);
 +document.addEventListener("mouseup", mouseup, false);
 +document.addEventListener("keydown", keyDownHandler, false);
 +document.addEventListener("keyup", keyUpHandler, false);
 +
 +function onload() {
 +	var drawtimer = setInterval(drawManager, 100 / 60);
 +} 
140  scripts/globals.js
@@ -0,0 +1,140 @@
 +var autofire = false;
 +var autospin = false;
 +var editmode = false;
 +var shiftheld = false;
 +var autoangle = 0;
 +var dronelimit = 0;
 +
 +var offset = {};
 +offset.x = 0;
 +offset.y = 0;
 +offset.totalx = 0;
 +offset.totaly = 0;
 +
 +var accel = {};
 +accel.x = 0;
 +accel.y = 0;
 +accel.amount = 0.005;
 +accel.max = 1;
 +
 +var input = {};
 +input.up = false;
 +input.down = false;
 +input.left = false;
 +input.right = false;
 +
 +var mouse = {};
 +mouse.x = 0;
 +mouse.y = 0;
 +mouse.held = false;
 +
 +function Barrel(a, xoff, yoff, width, length, baseReload, hasKnockBack, type) {
 +	this.angle = a;
 +	//Angle is the offset from the angle from mouse to tank.
 +	this.xoffset = xoff;
 +	//xoffset affect how far into the tank the barrel it.
 +	this.yoffset = yoff;
 +	//yoffset affect how far away from the center the barrel rotates.
 +	this.width = width;
 +	//width affects the width of the barrel.
 +	this.baselength = length;
 +	//baselength is the starting length of the barrel.
 +	this.length = length;
 +	//length affects the width of the barrel.
 +	this.basereload = baseReload;
 +	//basereload is the maximum delay between shots in frames.
 +	this.reload = 0;
 +	//Reload is how many frames until the barrel can fire again.
 +	this.hasKnockBack = hasKnockBack;
 +	//Does firing a bullet from this barrel knock you back?
 +	this.type = type;
 +	//0 = bullet firer, 1 = trap layer, 2 = drone maker.
 +}
 +
 +var barrels = [];
 +//Array containing all the barrels, each entry is a Barrel object.
 +
 +function Bullet(xoffset, yoffset, x, y, angle, size, knockback, damage, speed, health, distance, time, type) {
 +	this.xoffset = xoffset;
 +	this.yoffset = yoffset;
 +	this.x = x;
 +	this.y = y;
 +	this.angle = angle;
 +	this.size = size;
 +	this.knockback = knockback;
 +	this.damage = damage;
 +	this.speed = speed;
 +	this.health = health;
 +	this.distance = distance;
 +	this.time = time;
 +	this.originx = offset.totalx;
 +	this.originy = offset.totaly;
 +	this.type = type;
 +}
 +
 +var bullets = [];
 +//Array containing all the barrels, each entry is a Barrel object.
 +
 +function angle(cx, cy, ex, ey) {
 +	if (autospin === true) {
 +		return autoangle;
 +	}
 +  var dy = ey - cy, dx = ex - cx;
 +  var theta = Math.atan2(dy, dx); // range (-PI, PI]
 +  theta *= 180 / Math.PI; // rads to degs, range (-180, 180]
 +  //if (theta < 0) theta = 360 + theta; // range [0, 360)
 +  //theta *= (Math.PI / 180);
 +  return theta;
 +}
 +
 +function editButtonClick() {
 +	if (editmode === false) {
 +		editmode = true;
 +		autofire = false;
 +		autospin = false;
 +		var elements = document.getElementsByClassName("textbox");
 +
 +    	for (var i = 0; i < elements.length; i++){
 +        	elements[i].style.visibility = "visible";
 +    	}
 +	} else {
 +		editmode = false;
 +		var elements = document.getElementsByClassName("textbox");
 +
 +    	for (var i = 0; i < elements.length; i++){
 +        	elements[i].style.visibility = "hidden";
 +    	}
 +	}
 +}
 +
 +function validateField(value, returnval) {
 +	if (value.length == 0) {
 +	    return returnval;
 +	}
 +	if (isNaN(value) === true) {
 +		return returnval;
 +	} else {
 +		return value;
 +	}
 +}
 +
 +function printObject() {
 +	var barreltext = "";
 +	var outtext = "[";
 +	if (barrels.length > 0) {
 +		for (var i = 0; i < barrels.length; i += 1) {
 +			outtext += JSON.stringify(barrels[i]);
 +			if (i < barrels.length - 1) {
 +				outtext += ", ";
 +			}
 +		}
 +	}
 +	outtext += "]";
 +	document.getElementById("save").value = outtext;
 +}
 +
 +function importObject() {
 +	if (document.getElementById("save").value.length > 0) {
 +		barrels = JSON.parse(document.getElementById("save").value);
 +	}
 +} 
141  styles.css
@@ -0,0 +1,141 @@
 +#game {
 +    position: fixed; 
 +    top: 0; 
 +    left: 0; 
 +    padding:0;
 +    margin: 0;
 +    width:100%;
 +    height:100%;
 +    display: block;
 +	background-color: #CDCDCD;
 +	z-index: 0;
 +}
 +
 +.ubuntu {
 +	font-family: 'Ubuntu', sans-serif;
 +}
 +
 +#editbutton {
 +	z-index = 5;
 +	position:fixed;
 +	border:none;
 +}
 +
 +#note {
 +	z-index = 5;
 +	position:fixed;
 +	font: ubuntu 32px;
 +	margin-top: -5px;
 +	margin-left: 150px;
 +}
 +
 +.textbox {
 +	z-index = 5;
 +	position:fixed;
 +	border:none;
 +	visibility: hidden;
 +}
 +
 +#bodylabel {
 +	font: ubuntu 32px;
 +	margin-top: 50px;
 +	margin-left: 1px;
 +}
 +
 +#body {
 +	margin-top: 70px;
 +	margin-left: 1px;
 +}
 +
 +#offsetlabel {
 +	font: ubuntu 32px;
 +	margin-top: 90px;
 +	margin-left: 1px;
 +}
 +
 +#offset {
 +	margin-top: 130px;
 +	margin-left: 1px;
 +}
 +
 +#lengthlabel {
 +	font: ubuntu 32px;
 +	margin-top: 150px;
 +	margin-left: 1px;
 +}
 +
 +#length {
 +	margin-top: 170px;
 +	margin-left: 1px;
 +}
 +
 +#widthlabel {
 +	font: ubuntu 32px;
 +	margin-top: 190px;
 +	margin-left: 1px;
 +}
 +
 +#width {
 +	margin-top: 210px;
 +	margin-left: 1px;
 +}
 +
 +#reloadlabel {
 +	font: ubuntu 32px;
 +	margin-top: 230px;
 +	margin-left: 1px;
 +}
 +
 +#reload {
 +	margin-top: 250px;
 +	margin-left: 1px;
 +}
 +
 +#knockbacklabel {
 +	font: ubuntu 32px;
 +	margin-top: 270px;
 +	margin-left: 1px;
 +}
 +
 +#knockback {
 +	margin-top: 290px;
 +	margin-left: 1px;
 +}
 +
 +#traplabel {
 +	font: ubuntu 32px;
 +	margin-top: 310px;
 +	margin-left: 1px;
 +}
 +
 +#bullet {
 +	margin-top: 330px;
 +	margin-left: 1px;
 +}
 +
 +#place {
 +	margin-top: 350px;
 +	margin-left: 1px;
 +}
 +
 +#notes {
 +	font: ubuntu 32px;
 +	margin-top: 390px;
 +	margin-left: 1px;
 +}
 +
 +#export {
 +	margin-top: 490px;
 +	margin-left: 1px;
 +}
 +
 +#import {
 +	margin-top: 490px;
 +	margin-left: 100px;
 +}
 +
 +#save {
 +	font: ubuntu 32px;
 +	margin-top: 510px;
 +	margin-left: 1px;
